# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master

pool:
  vmImage: Ubuntu-16.04

steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Use Terraform 0.11.13'
  inputs:
    terraformVersion: 0.11.13
    
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'terraform init'
  inputs:
    command: init
    backendType: azurerm
    backendServiceArm: 'MSDN (9e9ce436-a21c-4409-a484-57e1a609fa92)'
    ensureBackend: true
    backendAzureRmResourceGroupName: TerraformDeployments
    backendAzureRmResourceGroupLocation: EastUS
    backendAzureRmStorageAccountName: tfdeployments
    backendAzureRmContainerName: tfdeployments
    backendAzureRmKey: prod.terraform.tfstate

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'terraform validate'

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'terraform plan'
  inputs:
    command: plan
    environmentServiceName: 'MSDN (9e9ce436-a21c-4409-a484-57e1a609fa92)'

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'terraform apply'
  inputs:
    command: apply
    environmentServiceName: 'MSDN (9e9ce436-a21c-4409-a484-57e1a609fa92)'


